{"version":3,"sources":["components/axios.js","components/Row/row.js","components/request.js","components/Banner/banner.js","components/Header/header.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLarge","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentories","Banner","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","Header","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.873e46af.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/**base url to make request to the movie database */\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../axios\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport \"./row.style.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({ title, fetchUrl, isLarge }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // if [], run once when row loads ,and don't run again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl); //get the movies from api\r\n      setMovies(request.data.results);\r\n      return request.data.results;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"360\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.title || movie?.name || movie?.original_name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search); //to get the search id\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"movie-posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`movie-poster ${isLarge && \"large-image\"}`}\r\n            src={`${base_url}${\r\n              isLarge ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"682ac65cee955ba5f3b7d9eede6b7dae\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks-213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentories: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./banner.style.css\";\r\nimport axios from \"../axios\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Banner({ fetchUrl }) {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // if [], run once when row loads ,and don't run again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl); //get the movies from api\r\n      let movies = request.data.results;\r\n      let movie = movies[Math.floor(Math.random() * movies.length) - 1];\r\n      setMovie(movie);\r\n      return movie;\r\n    }\r\n    fetchData();\r\n  }, [Banner]);\r\n\r\n  function truncate(s, n) {\r\n    console.log(s, n);\r\n\r\n    // if (s.length > n) {\r\n    //   return \"yes\";\r\n    // } else {\r\n    //   return \"no\";\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n            'https://image.tmdb.org/t/p/original/${movie.backdrop_path}'\r\n            )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner-content\">\r\n        <h1>{movie.title || movie.name || movie.original_name}</h1>\r\n        <div className=\"banner-buttons\">\r\n          <button className=\"banner-button\">Play</button>\r\n          <button className=\"banner-button\">My List</button>\r\n        </div>\r\n        <h2 className=\"banner-description\">{movie.overview}</h2>\r\n      </div>\r\n      <div className=\"fade\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./header.style.css\";\r\n\r\nfunction Header() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 47) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`navber ${show && \"nav-black\"}`}>\r\n      <img\r\n        className=\"nav-logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n\r\n      <h1>Clone By Akash</h1>\r\n\r\n      <img\r\n        className=\"nav-avater\"\r\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport Row from \"./components/Row/row\";\nimport requests from \"./components/request\";\nimport Banner from \"./components/Banner/banner\";\nimport Header from \"./components/Header/header\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Banner fetchUrl={requests.fetchNetflixOriginals} />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLarge\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanticMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentories} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}